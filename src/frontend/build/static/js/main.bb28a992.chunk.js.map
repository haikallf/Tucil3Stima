{"version":3,"sources":["components/Map.js","components/TabPanel.js","helper/fileRequests.js","helper/pathRequest.js","components/Form.js","App.js","reportWebVitals.js","index.js"],"names":["GoogleApiWrapper","apiKey","google","state","setter","bounds","window","maps","LatLngBounds","nodes","forEach","node","extend","position","useEffect","initialCenter","lat","lng","zoom","style","height","width","containerStyle","zoomControlOptions","ControlPosition","LEFT_CENTER","streetViewControlOptions","LEFT_TOP","fullscreenControl","map","index","name","title","label","onClick","setNodes","n","showInfo","visible","onClose","content","Math","round","JSON","stringify","lines","line","path","filter","rel","strokeColor","strokeOpacity","strokeWeight","paths","length","TabPanel","props","children","value","other","role","hidden","id","aria-labelledby","maxHeight","Box","p","readFileRequest","file","a","formData","FormData","append","fetch","method","headers","body","response","json","data","getPathRequest","filename","source","destination","Form","useState","start","setStart","end","setEnd","setValue","fileRef","useRef","theme","useTheme","handleFile","current","files","console","log","setLines","neighbors","setFilename","findPath","setPaths","pathNames","includes","indexOf","cost","Grid","container","spacing","padding","item","xs","Card","elevation","alignContent","CardHeader","subheader","CardContent","sm","FormControl","InputLabel","Select","labelId","onChange","e","target","MenuItem","Button","marginTop","variant","align","type","ref","encType","display","click","Typography","paddingLeft","paddingTop","Paper","square","Tabs","indicatorColor","textColor","val","aria-label","Tab","icon","DirectionsSharp","BubbleChartSharp","ShowChartSharp","axis","direction","onChangeIndex","dir","Table","TableHead","TableRow","TableCell","TableBody","component","scope","IconButton","VisibilitySharp","VisibilityOffSharp","distance","App","markers","setMarkers","infos","setInfos","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bb28a992.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n  Map,\n  InfoWindow,\n  Marker,\n  Polyline,\n  GoogleApiWrapper,\n} from \"google-maps-react\";\n\nconst MapContainer = ({ google, state, setter }) => {\n  const bounds = new window.google.maps.LatLngBounds();\n  state.nodes.forEach((node) => bounds.extend(node.position));\n\n  useEffect(() => {}, [state.nodes]);\n\n  return (\n    <Map\n      google={google}\n      initialCenter={{ lat: 25.36277778, lng: 49.56305556 }}\n      zoom={20}\n      style={{\n        height: \"100%\",\n        width: \"100%\",\n      }}\n      bounds={bounds}\n      containerStyle={{\n        height: \"100%\",\n        width: \"100%\",\n      }}\n      zoomControlOptions={{\n        position: google.maps.ControlPosition.LEFT_CENTER,\n      }}\n      streetViewControlOptions={{\n        position: google.maps.ControlPosition.LEFT_TOP,\n      }}\n      fullscreenControl={false}\n    >\n      {state.nodes.map((node, index) => (\n        <Marker\n          key={index}\n          name={node.name}\n          position={node.position}\n          title={node.name}\n          label={node.name}\n          onClick={() => {\n            setter.setNodes(\n              state.nodes.map((n) =>\n                n.position === node.position ? { ...n, showInfo: true } : n\n              )\n            );\n          }}\n        />\n      ))}\n\n      {state.nodes.map((node, index) => (\n        <InfoWindow\n          key={index}\n          position={{ ...node.position, lat: node.position.lat }}\n          visible={node.showInfo}\n          onClose={() =>\n            setter.setNodes(\n              state.nodes.map((n) =>\n                n.position === node.position ? { ...n, showInfo: false } : n\n              )\n            )\n          }\n        >\n          <h1>Node {node.name}</h1>\n          <p>\n            {typeof node.content !== \"undefined\"\n              ? `Accumulated cost: ${Math.round(node.content * 1000) / 1000} m`\n              : `At ${JSON.stringify(node.position)}`}\n          </p>\n        </InfoWindow>\n      ))}\n\n      {state.lines.map((line) => {\n        return (\n          <Polyline\n            path={state.nodes\n              .filter(\n                (node) => node.name === line.rel[0] || node.name === line.rel[1]\n              )\n              .map((node) => node.position)}\n            strokeColor=\"#FF0000\"\n            strokeOpacity={0.8}\n            strokeWeight={1}\n          />\n        );\n      })}\n\n      {state.paths.length === 0 ? null : (\n        <Polyline\n          path={state.paths.map(\n            (path) =>\n              state.nodes.filter((node) => node.name === path.node)[0].position\n          )}\n          strokeColor=\"#000000\"\n          strokeOpacity={1}\n          strokeWeight={3}\n        />\n      )}\n    </Map>\n  );\n};\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyD4R3GIGq1of7rPhu-ya4pCFLCQkQIBuyE\",\n})(MapContainer);\n","import { Box } from \"@material-ui/core\";\n\nconst TabPanel = (props) => {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`full-width-tabpanel-${index}`}\n      aria-labelledby={`full-width-tab-${index}`}\n      style={{ maxHeight: \"60vh\" }}\n      {...other}\n    >\n      {value === index && <Box p={3}>{children}</Box>}\n    </div>\n  );\n};\n\nexport default TabPanel;\n","const readFileRequest = async (file) => {\n  const formData = new FormData();\n  formData.append(\"file\", file);\n\n  const response = await fetch(\"http://localhost:5000/read-file\", {\n    method: \"POST\",\n    headers: {\n      \"Access-Control-Allow-Origin\": \"*\",\n    },\n    body: formData,\n  });\n\n  const data = await response.json();\n\n  return data;\n};\n\nexport default readFileRequest;\n","const getPathRequest = async (filename, source, destination) => {\n  const response = await fetch(\"http://localhost:5000/get-path\", {\n    method: \"POST\",\n    headers: {\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      source,\n      destination,\n      filename,\n    }),\n  });\n\n  const data = await response.json();\n\n  return data;\n};\n\nexport default getPathRequest;\n","import { useState, useRef, useEffect } from \"react\";\nimport {\n  Grid,\n  InputLabel,\n  Select,\n  MenuItem,\n  Card,\n  CardContent,\n  CardHeader,\n  FormControl,\n  IconButton,\n  Button,\n  Tabs,\n  Tab,\n  Paper,\n  Typography,\n  TableCell,\n  TableBody,\n  TableRow,\n  TableHead,\n  Table,\n} from \"@material-ui/core\";\nimport { useTheme } from \"@material-ui/core/styles\";\nimport SwipeableViews from \"react-swipeable-views\";\nimport TabPanel from \"./TabPanel\";\nimport {\n  DirectionsSharp,\n  BubbleChartSharp,\n  ShowChartSharp,\n  VisibilitySharp,\n  VisibilityOffSharp,\n} from \"@material-ui/icons\";\n\nimport readFileRequest from \"../helper/fileRequests\";\nimport getPathRequest from \"../helper/pathRequest\";\n\nconst Form = ({ state, setter }) => {\n  const [start, setStart] = useState();\n  const [end, setEnd] = useState();\n  const [value, setValue] = useState(0);\n\n  const fileRef = useRef();\n\n  const theme = useTheme();\n\n  const handleFile = async () => {\n    const file = fileRef.current.files[0];\n    const data = await readFileRequest(file);\n    console.log(data);\n    setter.setNodes(data.nodes);\n    setter.setLines(data.neighbors);\n    setter.setFilename(file.name);\n  };\n\n  const findPath = async () => {\n    if (start && end) {\n      const data = await getPathRequest(state.filename, start, end);\n      console.log(data);\n      setter.setPaths(data.paths);\n    }\n  };\n\n  useEffect(() => {\n    const pathNames = state.paths.map((path) => path.node);\n    setter.setNodes(\n      state.nodes.map((node) =>\n        pathNames.includes(node.name)\n          ? { ...node, content: state.paths[pathNames.indexOf(node.name)].cost }\n          : node\n      )\n    );\n  }, [state.paths]);\n\n  return (\n    <Grid container spacing={2} style={{ width: \"100%\", padding: 20 }}>\n      <Grid item xs={12}>\n        <Card elevation={3} alignContent=\"flex-start\">\n          <CardHeader\n            title=\"Pencarian Lintasan Terpendek\"\n            subheader=\"Sebuah implementasi algoritma A*\"\n          />\n\n          <CardContent>\n            <Grid container spacing={3}>\n              <Grid item xs={12} sm={4}>\n                <FormControl style={{ width: \"100%\" }}>\n                  <InputLabel id=\"start-label\">Source Node</InputLabel>\n                  <Select\n                    style={{ width: \"100%\" }}\n                    labelId=\"start-label\"\n                    id=\"demo-simple-select\"\n                    onChange={(e) => setStart(e.target.value)}\n                  >\n                    {state.nodes.map((node) => (\n                      <MenuItem value={node.name}>{node.name}</MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n              <Grid item xs={12} sm={4}>\n                <FormControl style={{ width: \"100%\" }}>\n                  <InputLabel id=\"end-label\">Destination Node</InputLabel>\n                  <Select\n                    style={{ width: \"100%\" }}\n                    labelId=\"end-label\"\n                    id=\"end\"\n                    onChange={(e) => setEnd(e.target.value)}\n                  >\n                    {state.nodes.map((node) => (\n                      <MenuItem value={node.name}>{node.name}</MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n\n              <Grid item xs={12} sm={4}>\n                <FormControl>\n                  <Button\n                    style={{ marginTop: 10 }}\n                    variant=\"outlined\"\n                    onClick={findPath}\n                  >\n                    Find Path\n                  </Button>\n                </FormControl>\n              </Grid>\n              <Grid item xs={12} align=\"flex-start\">\n                <input\n                  type=\"file\"\n                  ref={fileRef}\n                  encType=\"multipart/form\"\n                  onChange={handleFile}\n                  hidden\n                />\n                <div style={{ display: \"flex\" }}>\n                  <Button\n                    variant=\"outlined\"\n                    onClick={() => fileRef.current.click()}\n                  >\n                    load graph\n                  </Button>\n                  <Typography style={{ paddingLeft: 20, paddingTop: 10 }}>\n                    {state.filename === \"\"\n                      ? \"No file selected\"\n                      : state.filename}\n                  </Typography>\n                </div>\n              </Grid>\n            </Grid>\n          </CardContent>\n        </Card>\n      </Grid>\n      <Grid item xs={12}>\n        <Paper square elevation={3}>\n          <Tabs\n            value={value}\n            indicatorColor=\"primary\"\n            textColor=\"primary\"\n            onChange={(e, val) => setValue(val)}\n            aria-label=\"disabled tabs example\"\n          >\n            <Tab icon={<DirectionsSharp />} label=\"Path\" />\n            <Tab icon={<BubbleChartSharp />} label=\"Nodes\" />\n            <Tab icon={<ShowChartSharp />} label=\"Edges\" />\n          </Tabs>\n          <SwipeableViews\n            axis={theme.direction === \"rtl\" ? \"x-reverse\" : \"x\"}\n            index={value}\n            onChangeIndex={(index) => setValue(index)}\n          >\n            <TabPanel value={value} index={0} dir={theme.direction}>\n              <Table aria-label=\"path-table\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Step </TableCell>\n                    <TableCell>Current Node</TableCell>\n                    <TableCell>Cumulative Cost (m)</TableCell>\n                    <TableCell>View</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {state.paths.map((path, index) => (\n                    <TableRow key={index}>\n                      <TableCell>{index}</TableCell>\n                      <TableCell component=\"th\" scope=\"row\">\n                        {path.node}\n                      </TableCell>\n                      <TableCell>\n                        {Math.round(path.cost * 1000) / 1000}\n                      </TableCell>\n                      <TableCell>\n                        <IconButton\n                          onClick={() =>\n                            setter.setNodes(\n                              state.nodes.map((node) =>\n                                node.name === path.node\n                                  ? { ...node, showInfo: !node.showInfo }\n                                  : node\n                              )\n                            )\n                          }\n                        >\n                          {state.nodes.filter(\n                            (node) => node.name === path.node\n                          )[0].showInfo ? (\n                            <VisibilitySharp />\n                          ) : (\n                            <VisibilityOffSharp />\n                          )}\n                        </IconButton>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </TabPanel>\n            <TabPanel value={value} index={1} dir={theme.direction}>\n              <Table aria-label=\"node-table\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell>No. </TableCell>\n                    <TableCell>Node Name</TableCell>\n                    <TableCell>Longitude (deg)</TableCell>\n                    <TableCell>Lattitude (deg)</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {state.nodes.map((node, index) => (\n                    <TableRow key={index}>\n                      <TableCell>{index + 1}</TableCell>\n                      <TableCell component=\"th\" scope=\"row\">\n                        {node.name}\n                      </TableCell>\n                      <TableCell>{node.position.lng}</TableCell>\n                      <TableCell>{node.position.lat}</TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </TabPanel>\n            <TabPanel value={value} index={2} dir={theme.direction}>\n              <Table aria-label=\"vertices-table\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell>No. </TableCell>\n                    <TableCell>Src. Node</TableCell>\n                    <TableCell>Dest. Node</TableCell>\n                    <TableCell>Est. Distance (m)</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {state.lines.map((line, index) => (\n                    <TableRow key={index}>\n                      <TableCell>{index + 1}</TableCell>\n                      <TableCell component=\"th\" scope=\"row\">\n                        {line.rel[0]}\n                      </TableCell>\n                      <TableCell>{line.rel[1]}</TableCell>\n                      <TableCell>\n                        {Math.round(line.distance * 1000) / 1000}\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </TabPanel>\n          </SwipeableViews>\n        </Paper>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Form;\n","import { useState } from \"react\";\nimport GoogleApiWrapper from \"./components/Map\";\nimport Form from \"./components/Form\";\nimport \"./App.css\";\nimport \"./index.css\";\n\nconst App = () => {\n  const [nodes, setNodes] = useState([]);\n  const [markers, setMarkers] = useState([]);\n  const [infos, setInfos] = useState([]);\n  const [filename, setFilename] = useState(\"\");\n  const [lines, setLines] = useState([]);\n  const [paths, setPaths] = useState([]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"map-section\">\n        <GoogleApiWrapper\n          state={{ nodes, markers, paths, infos, lines, filename }}\n          setter={{ setNodes, setMarkers, setInfos, setLines, setPaths }}\n        />\n      </div>\n      <div className=\"form-section\">\n        <Form\n          state={{ nodes, paths, lines, filename }}\n          setter={{ setFilename, setNodes, setLines, setPaths }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}